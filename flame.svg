<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>&lt;curry_pbrt::geometry::shape::transform::TransformShape as curry_pbrt::geometry::shape::Shape&gt;::intersect_predicate (5 samples, 17.24%)</title><rect x="294.8" y="101" width="203.5" height="15.0" fill="rgb(231,75,46)" rx="2" ry="2" />
<text  x="297.83" y="111.5" >&lt;curry_pbrt::geometry::sha..</text>
</g>
<g >
<title>curry_pbrt::light::Light::sample_li_with_visibility_test (9 samples, 31.03%)</title><rect x="294.8" y="117" width="366.2" height="15.0" fill="rgb(212,153,11)" rx="2" ry="2" />
<text  x="297.83" y="127.5" >curry_pbrt::light::Light::sample_li_with_visibili..</text>
</g>
<g >
<title>curry_pbrt::material::bxdf::BRDF::sample_f (4 samples, 13.79%)</title><rect x="661.0" y="117" width="162.8" height="15.0" fill="rgb(248,37,25)" rx="2" ry="2" />
<text  x="664.03" y="127.5" >curry_pbrt::material..</text>
</g>
<g >
<title>_int_malloc (1 samples, 3.45%)</title><rect x="1149.3" y="85" width="40.7" height="15.0" fill="rgb(252,58,20)" rx="2" ry="2" />
<text  x="1152.31" y="95.5" >_in..</text>
</g>
<g >
<title>deflate::compress::compress_data_dynamic_n (1 samples, 3.45%)</title><rect x="50.7" y="85" width="40.7" height="15.0" fill="rgb(213,168,49)" rx="2" ry="2" />
<text  x="53.69" y="95.5" >def..</text>
</g>
<g >
<title>__rust_maybe_catch_panic (29 samples, 100.00%)</title><rect x="10.0" y="245" width="1180.0" height="15.0" fill="rgb(234,163,51)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >__rust_maybe_catch_panic</text>
</g>
<g >
<title>std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hb26e39676675046f (29 samples, 100.00%)</title><rect x="10.0" y="213" width="1180.0" height="15.0" fill="rgb(246,197,52)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >std::rt::lang_start_internal::_$u7b$$u7b$closure$u7d$$u7d$::hb26e39676675046f</text>
</g>
<g >
<title>std::panicking::try::do_call (29 samples, 100.00%)</title><rect x="10.0" y="229" width="1180.0" height="15.0" fill="rgb(210,17,2)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >std::panicking::try::do_call</text>
</g>
<g >
<title>png::encoder::Writer&lt;W&gt;::write_image_data (1 samples, 3.45%)</title><rect x="50.7" y="133" width="40.7" height="15.0" fill="rgb(243,42,17)" rx="2" ry="2" />
<text  x="53.69" y="143.5" >png..</text>
</g>
<g >
<title>&lt;curry_pbrt::sampler::halton::HaltonSampler as curry_pbrt::sampler::Sampler&gt;::get_sample (4 samples, 13.79%)</title><rect x="986.6" y="133" width="162.7" height="15.0" fill="rgb(206,16,50)" rx="2" ry="2" />
<text  x="989.55" y="143.5" >&lt;curry_pbrt::sampler..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 3.45%)</title><rect x="1149.3" y="101" width="40.7" height="15.0" fill="rgb(207,144,18)" rx="2" ry="2" />
<text  x="1152.31" y="111.5" >__G..</text>
</g>
<g >
<title>__atan2f_finite (1 samples, 3.45%)</title><rect x="945.9" y="53" width="40.7" height="15.0" fill="rgb(238,185,10)" rx="2" ry="2" />
<text  x="948.86" y="63.5" >__a..</text>
</g>
<g >
<title>[libm-2.31.so] (1 samples, 3.45%)</title><rect x="254.1" y="101" width="40.7" height="15.0" fill="rgb(246,18,10)" rx="2" ry="2" />
<text  x="257.14" y="111.5" >[li..</text>
</g>
<g >
<title>[libm-2.31.so] (1 samples, 3.45%)</title><rect x="620.3" y="85" width="40.7" height="15.0" fill="rgb(208,160,40)" rx="2" ry="2" />
<text  x="623.34" y="95.5" >[li..</text>
</g>
<g >
<title>std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h4fb63387cdf1fa49 (29 samples, 100.00%)</title><rect x="10.0" y="197" width="1180.0" height="15.0" fill="rgb(206,77,19)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h4fb63387cdf1fa49</text>
</g>
<g >
<title>std::panic::catch_unwind (29 samples, 100.00%)</title><rect x="10.0" y="277" width="1180.0" height="15.0" fill="rgb(235,104,33)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >std::panic::catch_unwind</text>
</g>
<g >
<title>&lt;curry_pbrt::sampler::halton::HaltonSampler as curry_pbrt::sampler::Sampler&gt;::get_sample (4 samples, 13.79%)</title><rect x="498.3" y="101" width="162.7" height="15.0" fill="rgb(235,174,13)" rx="2" ry="2" />
<text  x="501.28" y="111.5" >&lt;curry_pbrt::sampler..</text>
</g>
<g >
<title>&lt;curry_pbrt::sampler::halton::HaltonSampler as curry_pbrt::sampler::Sampler&gt;::get_sample (2 samples, 6.90%)</title><rect x="213.4" y="117" width="81.4" height="15.0" fill="rgb(240,204,29)" rx="2" ry="2" />
<text  x="216.45" y="127.5" >&lt;curry_pb..</text>
</g>
<g >
<title>std::rt::lang_start_internal (29 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(207,98,14)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >std::rt::lang_start_internal</text>
</g>
<g >
<title>&lt;curry_pbrt::geometry::shape::transform::TransformShape as curry_pbrt::geometry::shape::Shape&gt;::intersect (4 samples, 13.79%)</title><rect x="823.8" y="101" width="162.8" height="15.0" fill="rgb(245,150,30)" rx="2" ry="2" />
<text  x="826.79" y="111.5" >&lt;curry_pbrt::geometr..</text>
</g>
<g >
<title>alloc::vec::from_elem (1 samples, 3.45%)</title><rect x="1149.3" y="117" width="40.7" height="15.0" fill="rgb(254,214,27)" rx="2" ry="2" />
<text  x="1152.31" y="127.5" >all..</text>
</g>
<g >
<title>curry_pbrt::film::Film::gen_tiles (1 samples, 3.45%)</title><rect x="1149.3" y="133" width="40.7" height="15.0" fill="rgb(253,176,6)" rx="2" ry="2" />
<text  x="1152.31" y="143.5" >cur..</text>
</g>
<g >
<title>curry_pbrt::render::render_from_file (29 samples, 100.00%)</title><rect x="10.0" y="165" width="1180.0" height="15.0" fill="rgb(242,94,13)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >curry_pbrt::render::render_from_file</text>
</g>
<g >
<title>deflate::compress::flush_to_bitstream (1 samples, 3.45%)</title><rect x="50.7" y="69" width="40.7" height="15.0" fill="rgb(213,135,5)" rx="2" ry="2" />
<text  x="53.69" y="79.5" >def..</text>
</g>
<g >
<title>&lt;curry_pbrt::integrator::direct_light::DirectLightIntegrator as curry_pbrt::integrator::Integrator&gt;::li (20 samples, 68.97%)</title><rect x="172.8" y="133" width="813.8" height="15.0" fill="rgb(238,50,32)" rx="2" ry="2" />
<text  x="175.76" y="143.5" >&lt;curry_pbrt::integrator::direct_light::DirectLightIntegrator as curry_pbrt::integrator::Integrator&gt;::li</text>
</g>
<g >
<title>__libc_start_main (29 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(239,214,49)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >__libc_start_main</text>
</g>
<g >
<title>curry_pbrt::geometry::point::cosine_sample_hemisphere (2 samples, 6.90%)</title><rect x="742.4" y="101" width="81.4" height="15.0" fill="rgb(231,111,41)" rx="2" ry="2" />
<text  x="745.41" y="111.5" >curry_pbr..</text>
</g>
<g >
<title>main (29 samples, 100.00%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(209,206,31)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >main</text>
</g>
<g >
<title>&lt;curry_pbrt::camera::perspective::PerspectiveCamera as curry_pbrt::camera::Camera&gt;::generate_ray (1 samples, 3.45%)</title><rect x="132.1" y="133" width="40.7" height="15.0" fill="rgb(241,170,53)" rx="2" ry="2" />
<text  x="135.07" y="143.5" >&lt;cu..</text>
</g>
<g >
<title>_start (29 samples, 100.00%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(210,159,22)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >_start</text>
</g>
<g >
<title>&lt;curry_pbrt::sampler::halton::HaltonSampler as curry_pbrt::sampler::Sampler&gt;::get_sample (2 samples, 6.90%)</title><rect x="661.0" y="101" width="81.4" height="15.0" fill="rgb(251,190,54)" rx="2" ry="2" />
<text  x="664.03" y="111.5" >&lt;curry_pb..</text>
</g>
<g >
<title>deflate::writer::ZlibEncoder&lt;W&gt;::finish (1 samples, 3.45%)</title><rect x="50.7" y="117" width="40.7" height="15.0" fill="rgb(219,189,14)" rx="2" ry="2" />
<text  x="53.69" y="127.5" >def..</text>
</g>
<g >
<title>curry_pbrt::scene::Scene::intersect (4 samples, 13.79%)</title><rect x="823.8" y="117" width="162.8" height="15.0" fill="rgb(209,61,18)" rx="2" ry="2" />
<text  x="826.79" y="127.5" >curry_pbrt::scene::S..</text>
</g>
<g >
<title>atan2f32 (1 samples, 3.45%)</title><rect x="945.9" y="69" width="40.7" height="15.0" fill="rgb(247,93,54)" rx="2" ry="2" />
<text  x="948.86" y="79.5" >ata..</text>
</g>
<g >
<title>deflate::encoder_state::EncoderState::write_lzvalue (1 samples, 3.45%)</title><rect x="50.7" y="53" width="40.7" height="15.0" fill="rgb(219,159,51)" rx="2" ry="2" />
<text  x="53.69" y="63.5" >def..</text>
</g>
<g >
<title>&lt;curry_pbrt::geometry::shape::sphere::Sphere as curry_pbrt::geometry::shape::Shape&gt;::intersect (3 samples, 10.34%)</title><rect x="864.5" y="85" width="122.1" height="15.0" fill="rgb(235,10,44)" rx="2" ry="2" />
<text  x="867.48" y="95.5" >&lt;curry_pbrt::ge..</text>
</g>
<g >
<title>all (29 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(229,225,46)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>curry_pbrt::film::Film::write_image (2 samples, 6.90%)</title><rect x="10.0" y="149" width="81.4" height="15.0" fill="rgb(229,153,46)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >curry_pbr..</text>
</g>
<g >
<title>curry_pbrt::geometry::point::&lt;impl curry_pbrt::geometry::transform::Transformable for nalgebra::geometry::point::Point&lt;f32,nalgebra::base::dimension::U3&gt;&gt;::apply (1 samples, 3.45%)</title><rect x="132.1" y="117" width="40.7" height="15.0" fill="rgb(211,144,27)" rx="2" ry="2" />
<text  x="135.07" y="127.5" >cur..</text>
</g>
<g >
<title>&lt;curry_pbrt::geometry::shape::sphere::Sphere as curry_pbrt::geometry::shape::Shape&gt;::intersect (3 samples, 10.34%)</title><rect x="335.5" y="69" width="122.1" height="15.0" fill="rgb(207,152,38)" rx="2" ry="2" />
<text  x="338.52" y="79.5" >&lt;curry_pbrt::ge..</text>
</g>
<g >
<title>render_from_fil (29 samples, 100.00%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(233,0,19)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >render_from_fil</text>
</g>
<g >
<title>curry_pbrt::geometry::vector::&lt;impl curry_pbrt::geometry::transform::Transformable for nalgebra::base::matrix::Matrix&lt;f32,nalgebra::base::dimension::U3,nalgebra::base::dimension::U1,&lt;nalgebra::base::default_allocator::DefaultAllocator as nalgebra::base::allocator::Allocator&lt;f32,nalgebra::base::dimension::U3&gt;&gt;::Buffer&gt;&gt;::apply (1 samples, 3.45%)</title><rect x="457.6" y="85" width="40.7" height="15.0" fill="rgb(244,220,51)" rx="2" ry="2" />
<text  x="460.59" y="95.5" >cur..</text>
</g>
<g >
<title>curry_pbrt::geometry::ray::Ray::eval (1 samples, 3.45%)</title><rect x="416.9" y="53" width="40.7" height="15.0" fill="rgb(218,61,50)" rx="2" ry="2" />
<text  x="419.90" y="63.5" >cur..</text>
</g>
<g >
<title>deflate::writer::ZlibEncoder&lt;W&gt;::output_all (1 samples, 3.45%)</title><rect x="50.7" y="101" width="40.7" height="15.0" fill="rgb(220,123,21)" rx="2" ry="2" />
<text  x="53.69" y="111.5" >def..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 3.45%)</title><rect x="50.7" y="37" width="40.7" height="15.0" fill="rgb(209,107,30)" rx="2" ry="2" />
<text  x="53.69" y="47.5" >__m..</text>
</g>
<g >
<title>curry_pbrt::render::render (27 samples, 93.10%)</title><rect x="91.4" y="149" width="1098.6" height="15.0" fill="rgb(207,209,1)" rx="2" ry="2" />
<text  x="94.38" y="159.5" >curry_pbrt::render::render</text>
</g>
<g >
<title>curry_pbrt::geometry::point::&lt;impl curry_pbrt::geometry::transform::Transformable for nalgebra::geometry::point::Point&lt;f32,nalgebra::base::dimension::U3&gt;&gt;::apply (1 samples, 3.45%)</title><rect x="294.8" y="85" width="40.7" height="15.0" fill="rgb(246,224,26)" rx="2" ry="2" />
<text  x="297.83" y="95.5" >cur..</text>
</g>
<g >
<title>atanf32 (1 samples, 3.45%)</title><rect x="945.9" y="37" width="40.7" height="15.0" fill="rgb(250,104,24)" rx="2" ry="2" />
<text  x="948.86" y="47.5" >ata..</text>
</g>
<g >
<title>std::panicking::try (29 samples, 100.00%)</title><rect x="10.0" y="261" width="1180.0" height="15.0" fill="rgb(243,61,33)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >std::panicking::try</text>
</g>
<g >
<title>curry_pbrt::geometry::shape::Shape::intersect_predicate (3 samples, 10.34%)</title><rect x="335.5" y="85" width="122.1" height="15.0" fill="rgb(254,9,49)" rx="2" ry="2" />
<text  x="338.52" y="95.5" >curry_pbrt::geo..</text>
</g>
<g >
<title>render_from_file::main (29 samples, 100.00%)</title><rect x="10.0" y="181" width="1180.0" height="15.0" fill="rgb(253,136,16)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >render_from_file::main</text>
</g>
</g>
</svg>
